<?xml version="1.0" encoding="UTF-8" ?>
<feed  version="1.0" hasPendingRequests="false" >
  <company></company>
  <status>200</status>
  <errmsg>OK</errmsg>
  <interval>0</interval>
    <entry type="predatasource">
        <version>1649071991</version>
        <name>Fortinet_FortiGate_HighAvailability</name>
        <displayedas>FortiGate: High Availability</displayedas>
        <description>Monitors FortiGate high availability status.</description>
        <collector>batchscript</collector>
        <hasMultiInstances>true</hasMultiInstances>
        <useWildValueAsUniqueIdentifier>false</useWildValueAsUniqueIdentifier>
        <schedule>180</schedule>
        <appliesTo>hasCategory(&#34;FortiGate&#34;)</appliesTo>
        <wildcardauto>true</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript>ad_script</wildcardlinuxscript>
        <wildcardlinuxcmdline>type=&#34;embeded&#34; </wildcardlinuxcmdline>
        <wildcardwinscript>ad_script</wildcardwinscript>
        <wildcardwincmdline>type=&#34;embeded&#34; </wildcardwincmdline>
        <wildcardgroovyscript>import com.santaba.agent.groovyapi.snmp.Snmp

// set environment variables...
def hostname = hostProps.get(&#39;system.hostname&#39;)
def props = hostProps.toProperties()
def snmp_timeout = 10000

// set SNMP OIDs...
def fgHaSystemMode_oid = &#39;1.3.6.1.4.1.12356.101.13.1.1&#39;;
def fgHaGroupName_oid = &#39;1.3.6.1.4.1.12356.101.13.1.7&#39;;
def fgHaSystemMode_states = [1:&#34;Standalone&#34;,2:&#34;Active-Active&#34;,3:&#34;Active-Passive&#34;];//MAP to output sys mode state...

//start script...
try {
    // create SNMP walk with defined variables and map...
    fgHaSystemMode_walk = Snmp.walk(hostname, fgHaSystemMode_oid, props, snmp_timeout);//walk the wanted OID using the retrieved props...

    // iterate SNMP WALK results (each line)...
    fgHaSystemMode_walk.eachLine()
            { line -&#62;
                // split on the &#39;=&#39; sign and get the oid and respective value...
                (oid, value) = line.split(/ = /, 2)
				fgHaGroupName_value = Snmp.get(hostname, fgHaGroupName_oid+&#39;.0&#39;, props, snmp_timeout);
				if(fgHaGroupName_value!=&#34;&#34;){group_name=fgHaGroupName_value;}else{group_name=&#34;0&#34;;}
				println &#34;0##${group_name}##${fgHaSystemMode_states[value.toInteger()]}####auto.fgHaSystemMode=${value}&#34;
            }
    return 0;// return success code...
}

// catch any exception that could&#39;ve occurred during execution...
catch (Exception exc) {
    println exc;// print exception...
    return 1;// return error code...
}</wildcardgroovyscript>
        <wildcardschedule>1440</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group>FortiNet - FortiGate</group>
        <tags></tags>
        <technology></technology>
        <adlist><![CDATA[{"agdmethod":"none","method":"ad_script","agdparams":"","id":0,"filters":[],"params":{"type":"embeded","groovyscript":"import com.santaba.agent.groovyapi.snmp.Snmp\r\n\r\n// set environment variables...\r\ndef hostname = hostProps.get('system.hostname')\r\ndef props = hostProps.toProperties()\r\ndef snmp_timeout = 10000\r\n\r\n// set SNMP OIDs...\r\ndef fgHaSystemMode_oid = '1.3.6.1.4.1.12356.101.13.1.1';\r\ndef fgHaGroupName_oid = '1.3.6.1.4.1.12356.101.13.1.7';\r\ndef fgHaSystemMode_states = [1:\"Standalone\",2:\"Active-Active\",3:\"Active-Passive\"];//MAP to output sys mode state...\r\n\r\n//start script...\r\ntry {\r\n    // create SNMP walk with defined variables and map...\r\n    fgHaSystemMode_walk = Snmp.walk(hostname, fgHaSystemMode_oid, props, snmp_timeout);//walk the wanted OID using the retrieved props...\r\n\r\n    // iterate SNMP WALK results (each line)...\r\n    fgHaSystemMode_walk.eachLine()\r\n            { line ->\r\n                // split on the '=' sign and get the oid and respective value...\r\n                (oid, value) = line.split(/ = /, 2)\r\n\t\t\t\tfgHaGroupName_value = Snmp.get(hostname, fgHaGroupName_oid+'.0', props, snmp_timeout);\r\n\t\t\t\tif(fgHaGroupName_value!=\"\"){group_name=fgHaGroupName_value;}else{group_name=\"0\";}\r\n\t\t\t\tprintln \"0##${group_name}##${fgHaSystemMode_states[value.toInteger()]}####auto.fgHaSystemMode=${value}\"\r\n            }\r\n    return 0;// return success code...\r\n}\r\n\r\n// catch any exception that could've occurred during execution...\r\ncatch (Exception exc) {\r\n    println exc;// print exception...\r\n    return 1;// return error code...\r\n}"}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>1</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>embed</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>import com.santaba.agent.groovyapi.snmp.Snmp

// set environment variables...
def hostname = hostProps.get(&#39;system.hostname&#39;)
def props = hostProps.toProperties()
def snmp_timeout = 10000

// set SNMP OIDs...
def fgHaAutoSync_oid = &#39;1.3.6.1.4.1.12356.101.13.1.5&#39;;
def fgHaSystemMode_oid = &#39;1.3.6.1.4.1.12356.101.13.1.1&#39;;
def entPhysicalSerialNum_oid = &#39;1.3.6.1.2.1.47.1.1.1.1.11&#39;;
def fgHaStatsIndex_oid = &#39;1.3.6.1.4.1.12356.101.13.2.1.1.1&#39;;
def fgHaStatsSerial_oid = &#39;1.3.6.1.4.1.12356.101.13.2.1.1.2&#39;;
def fgHaStatsMasterSerial_oid = &#39;1.3.6.1.4.1.12356.101.13.2.1.1.16&#39;;

//start script...
try {    
	fgHaAutoSync_value = Snmp.get(hostname, fgHaAutoSync_oid+&#39;.0&#39;, props, snmp_timeout);
	fgHaSystemMode_value = Snmp.get(hostname, fgHaSystemMode_oid+&#39;.0&#39;, props, snmp_timeout);
	println &#34;0.HAAutoSync=${fgHaAutoSync_value}&#34;;
	println &#34;0.HASystemMode=${fgHaSystemMode_value}&#34;;


	if(fgHaSystemMode_value!=&#34;1&#34;){//only evalute HA states if not in Standalone mode...
		//determine HA State (this node &#38; peer)
		entPhysicalSerialNum_value = Snmp.get(hostname, entPhysicalSerialNum_oid+&#39;.1&#39;, props, snmp_timeout);//retrieve this FW S/N
		fgHaStatsIndex_walk = Snmp.walk(hostname, fgHaStatsIndex_oid, props, snmp_timeout);//walk the FW index on this HA group

		fgHaStatsIndex_walk.eachLine(){ line -&#62;// iterate SNMP WALK results (each line)...
			// split on the &#39;=&#39; sign and get the oid and respective value...
			(oid, index) = line.split(/ = /, 2)

			fgHaStatsSerial_value = Snmp.get(hostname, fgHaStatsSerial_oid+&#34;.${index}&#34;, props, snmp_timeout);//get S/N of respective FW in the index
			fgHaStatsMasterSerial_value = Snmp.get(hostname, fgHaStatsMasterSerial_oid+&#34;.${index}&#34;, props, snmp_timeout);//get S/N of MASTER FW on this HA

			if(fgHaStatsSerial_value==entPhysicalSerialNum_value){//check if FW index in question is this resource
				if(fgHaStatsMasterSerial_value==entPhysicalSerialNum_value){//determina HA states (if the master is this one, then it&#39;s active)
					println &#34;0.HAState=1&#34;;
					println &#34;0.PeerHAState=0&#34;;
				}else{//otherwise, it&#39;s passive &#38; the peer is active
					println &#34;0.HAState=0&#34;;
					println &#34;0.PeerHAState=1&#34;;
				}
			}
		}
	}else{
		println &#34;0.HAState=NaN&#34;;
		println &#34;0.PeerHAState=NaN&#34;;
	}
	return 0;// return success code...
}

// catch any exception that could&#39;ve occurred during execution...
catch (Exception exc) {
    println exc;// print exception...
    return 1;// return error code...
}</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>eriscripttype</name>
            <value>embed</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>eriscriptgroovy</name>
            <value>/******************************************************************************
 * Â© 2007-2020 - LogicMonitor, Inc. All rights reserved.
 ******************************************************************************/

import com.santaba.agent.groovyapi.snmp.Snmp
import org.json.JSONArray
import org.json.JSONObject

def host = hostProps.get(&#34;system.hostname&#34;)
def keyNamespace = hostProps.get(hostProps.get(&#34;topo.namespace&#34;, &#34;&#34;), &#34;&#34;)
def keyBlacklist = hostProps.get(&#34;topo.blacklist&#34;, &#34;&#34;).tokenize(&#34;,&#34;)

def haEri = []

// 1 is Standalone, 2 is Active-Active, and 3 is Active-Passive HA mode
def haMode =  Snmp.get(host, &#34;1.3.6.1.4.1.12356.101.13.1.1.0&#34;)
if (haMode == &#34;2&#34; || haMode == &#34;3&#34;) {

    def masterSerial = Snmp.walkAsMap(host, &#34;1.3.6.1.4.1.12356.101.13.2.1.1.16&#34;, null, 60000).find { it.value }?.value
    def deviceSerial = Snmp.get(host, &#34;1.3.6.1.4.1.12356.101.13.2.1.1.2.1&#34;)?.toString()
    if (masterSerial) {
        def haHostName =  Snmp.get(host, &#34;1.3.6.1.4.1.12356.101.13.2.1.1.11.${##WILDALIAS##}&#34;) // alias is index
        if (haHostName) {
            haEri &#60;&#60; &#34;${masterSerial.toLowerCase()}--${haHostName.toLowerCase()}&#34;
        }        
    }
}

// Output HA eri
haEri.unique()
if (!haEri.isEmpty()) {
    println &#39;predef.externalResourceID=&#39; + eriPreProcessor(haEri, keyNamespace, keyBlacklist) 
    println &#39;predef.externalResourceType=Firewall&#39; 
}     

return 0

// Function to validate a MAC address and filter it out if reserved
def isMac(address, reservedAddresses) {
    if (address == null) return false

    if (address.matches(&#34;[0-9a-f]{2}([-:]?)[0-9a-f]{2}(\\1[0-9a-f]{2}){4}\$&#34;)) {
        if (!reservedAddresses.find { address.startsWith(it)}) return true
    }
    return false
}

// Append and use this function to the end of the script.
def eriPreProcessor(List eriList, String namespace, List blacklist) {
    def output = []
    eriList.each{ eri-&#62;
        eri = eri.toLowerCase()
        eri = eri.replace(&#34;,&#34;, &#34;_&#34;)
        if(!blacklist.contains(eri)) {
            if(namespace) eri=&#34;${namespace.replace(&#34;,&#34;, &#34;_&#34;)}::${eri}&#34;
            output &#60;&#60; eri
        }
    }
    return output.join(&#34;,&#34;)
}</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>eriwinscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>erilinuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>eriwincmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>erilinuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>HAAutoSync</name>
            <originId>BQjnDEAOT12ykXe2AWLuKg</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.HAAutoSync</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description>Configuration of an automatic configuration synchronization.

Status codes:
1=Disabled,
2=Enabled</description>
            <maxvalue></maxvalue>
            <minvalue>0</minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>5</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>HASystemMode</name>
            <originId>ievHs6v0T_qTfh8LXCPbcQ</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.HASystemMode</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description>High-availability mode (Standalone, A-A or A-P)

Status codes:
1=Standalone,
2=Active-Active,
3=Active-Passive</description>
            <maxvalue></maxvalue>
            <minvalue>0</minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>HAState</name>
            <originId>kqJOcVt6SXaoo8tB_Zh_NA</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.HAState</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody>The HA state for ##HOST## has changed to ##VALUE##. This started at ##START## or ##DURATION## ago.
1 = Active
0 = Passive</alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description>Current high-availability state.
1 = Active
0 = Passive</description>
            <maxvalue></maxvalue>
            <minvalue>0</minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>PeerHAState</name>
            <originId>0BoGXibCRc6pn7rcZxRW7A</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.PeerHAState</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr>nandelta&#62; 0 0</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody>The Peer HA state for ##HOST## has changed to ##VALUE##. This started at ##START## or ##DURATION## ago.
1 = Active
0 = Passive</alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description>Current peer high-availability state.
1 = Active
0 = Passive</description>
            <maxvalue></maxvalue>
            <minvalue>0</minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>20</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        <graph>
            <name>Auto Sync Mode</name>
            <title>Auto Sync Mode</title>
            <originId></originId>            <verticallabel>1=disabled, 2=enabled</verticallabel>
            <rigid>false</rigid>
            <maxvalue>3.0</maxvalue>
            <minvalue>0.0</minvalue>
            <displayprio>2</displayprio>
            <timescale>1day</timescale>
            <base1024>false</base1024>
            <graphdatapoints>
        <graphdatapoint>
            <name>HAAutoSync</name>
            <datapointname>HAAutoSync</datapointname>
            <originId></originId>
            <cf>1</cf>
        </graphdatapoint>
            </graphdatapoints>
            <graphvirtualdatapoints>
            </graphvirtualdatapoints>
            <graphdatas>
            <graphdata>
                <type>1</type>
                <legend>HA Auto Sync</legend>
                <color>blue</color>
                <datapointname>HAAutoSync</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
            </graphdata>
            </graphdatas>
        </graph>
        <graph>
            <name>HA State</name>
            <title>HA State</title>
            <originId></originId>            <verticallabel>0=passive  1=active</verticallabel>
            <rigid>false</rigid>
            <maxvalue>2.0</maxvalue>
            <minvalue>-1.0</minvalue>
            <displayprio>3</displayprio>
            <timescale>1day</timescale>
            <base1024>false</base1024>
            <graphdatapoints>
        <graphdatapoint>
            <name>HAState</name>
            <datapointname>HAState</datapointname>
            <originId></originId>
            <cf>1</cf>
        </graphdatapoint>
        <graphdatapoint>
            <name>PeerHAState</name>
            <datapointname>PeerHAState</datapointname>
            <originId></originId>
            <cf>1</cf>
        </graphdatapoint>
            </graphdatapoints>
            <graphvirtualdatapoints>
            </graphvirtualdatapoints>
            <graphdatas>
            <graphdata>
                <type>1</type>
                <legend>This Device</legend>
                <color>purple</color>
                <datapointname>HAState</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
            </graphdata>
            <graphdata>
                <type>1</type>
                <legend>Peer Device</legend>
                <color>orange</color>
                <datapointname>PeerHAState</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
            </graphdata>
            </graphdatas>
        </graph>
        <graph>
            <name>High-Availability Mode</name>
            <title>High-Availability Mode</title>
            <originId></originId>            <verticallabel>status code</verticallabel>
            <rigid>false</rigid>
            <maxvalue>4.0</maxvalue>
            <minvalue>0.0</minvalue>
            <displayprio>1</displayprio>
            <timescale>1day</timescale>
            <base1024>false</base1024>
            <graphdatapoints>
        <graphdatapoint>
            <name>HASystemMode</name>
            <datapointname>HASystemMode</datapointname>
            <originId></originId>
            <cf>1</cf>
        </graphdatapoint>
            </graphdatapoints>
            <graphvirtualdatapoints>
            </graphvirtualdatapoints>
            <graphdatas>
            <graphdata>
                <type>1</type>
                <legend>HA System Mode</legend>
                <color>gray</color>
                <datapointname>HASystemMode</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
            </graphdata>
            </graphdatas>
        </graph>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
</feed>
